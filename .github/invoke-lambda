#!/bin/bash

set -o nounset -o pipefail -o errexit

SCRIPT_DIR=$(readlink -f $0 | xargs dirname)
BIN_DIR=${BIN_DIR-$SCRIPT_DIR/../bin}

if [ -f "./.env" ]; then
    set -a
    . "./.env"
    set +a
fi

LAMBDA_ARN=${LAMBDA_ARN-$1}
REGION=$(cut -d':' -f 4 <<< "$LAMBDA_ARN")

ARGS=("--function-name="$LAMBDA_ARN"")
ARGS+=("--region=$REGION")
ARGS+=("--invocation-type=Event")

if [ -n "${AWS_PROFILE-}" ]; then
    ARGS+=("--profile=$AWS_PROFILE")
fi

TMP=$(mktemp -d)
trap 'rm -rf $TMP' EXIT


BASE64_AFTER_VERSION="2"
AWS_CLI_VERSION=$(aws --version | sed 's,[^/]\+/\(\S\+\).*,\1,')
if [ "$BASE64_AFTER_VERSION" = "$(head -n1 <(sort --version-sort <(echo "$BASE64_AFTER_VERSION"; echo "$AWS_CLI_VERSION")))" ]; then
    PAYLOAD="$TMP/payload.json.b64"
else
    PAYLOAD="$TMP/payload.json"
fi

python3 - "$BIN_DIR/whereami" "$PAYLOAD" <<EOF >"$TMP/trigger.id"
import subprocess
import json
import uuid
import sys
import base64

tid = "T" + uuid.uuid4().hex
j = {
    "trigger": {
        "id": tid,
    },
    **json.loads(subprocess.check_output([sys.argv[1], "current", "--json"]))
}

out = sys.argv[2]
if out.endswith(".b64"):
    with open(out, "wb") as f:
        f.write(base64.b64encode(json.dumps(j).encode("UTF-8")))
else:
    with open(out, "w") as f:
        json.dump(j, f)

print(tid)
EOF

ARGS+=("--payload=file://$PAYLOAD")

echo 1>&2 "invoking lambda: $LAMBDA_ARN ($(<"$TMP/trigger.id"))"
aws lambda invoke "${ARGS[@]}" "$TMP/out.json" > "$TMP/result.json"

EXIT=0

STATUS_CODE=$(jq -r .StatusCode "$TMP/result.json")
if [ "$STATUS_CODE" != 202 ]; then
    echo 1>&2 "invocation status code: $STATUS_CODE != 200"
    jq -r . "$TMP/result.json" | sed 's/^/  /' 1>&2
    EXIT=1
fi

FUNCTION_ERROR=$(jq -r .FunctionError "$TMP/result.json")
if [ "$FUNCTION_ERROR" != "null" ]; then
    echo 1>&2 "invocation errored! ($FUNCTION_ERROR)"
    jq -r . "$TMP/result.json" | sed 's/^/  /' 1>&2
    EXIT=2
fi

exit "$EXIT"
