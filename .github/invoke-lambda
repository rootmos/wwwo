#!/bin/bash

set -o nounset -o pipefail -o errexit

if [ -f "./.env" ]; then
    set -a
    . "./.env"
    set +a
fi

LAMBDA_ARN=${LAMBDA_ARN-$1}
REGION=$(cut -d':' -f 4 <<< "$LAMBDA_ARN")

ARGS=("--function-name="$LAMBDA_ARN"")
ARGS+=("--region=$REGION")
ARGS+=("--invocation-type=RequestResponse")
ARGS+=("--log-type=Tail")

if [ -n "${AWS_PROFILE-}" ]; then
    ARGS+=("--profile=$AWS_PROFILE")
fi

TMP=$(mktemp -d)
trap 'rm -rf $TMP' EXIT

echo 1>&2 "invoking lambda: $LAMBDA_ARN"

aws lambda invoke "${ARGS[@]}" "$TMP/out.json" > "$TMP/result.json"

EXIT=0

STATUS_CODE=$(jq -r .StatusCode "$TMP/result.json")
if [ "$STATUS_CODE" != 200 ]; then
    echo 1>&2 "invocation status code: $STATUS_CODE != 200"
    jq -r . "$TMP/result.json" | sed 's/^/  /' 1>&2
    EXIT=1
fi

FUNCTION_ERROR=$(jq -r .FunctionError "$TMP/result.json")
if [ "$FUNCTION_ERROR" != "null" ]; then
    echo 1>&2 "invocation errored! ($FUNCTION_ERROR)"
    jq -r . "$TMP/result.json" | sed 's/^/  /' 1>&2
    EXIT=2
fi

echo 1>&2 "log:"
jq -r .LogResult "$TMP/result.json" | base64 -d | sed 's/^/  /' 1>&2

exit "$EXIT"
