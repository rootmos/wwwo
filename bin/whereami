#!/usr/bin/env python3

import argparse
import datetime
import getpass
import json
import os
import shutil
import socket
import subprocess
import sys
import html

class Situation:
    @staticmethod
    def add_arguments(parser):
        pass

    @staticmethod
    def figure_out(args):
        return None

class Now(Situation):
    key = "now"

    @staticmethod
    def figure_out(args):
        now = datetime.datetime.now().astimezone()
        return {
            "iso8601": now.isoformat(timespec="seconds"),
            "epoch": int(now.timestamp()),
        }

class OS(Situation):
    key = "os"

    @staticmethod
    def figure_out(args):
        return {
            "pid": os.getpid(),
            "cwd": os.getcwd(),
            "uid": os.getuid(),
            "gid": os.getgid(),
            "user": getpass.getuser(),
            "hostname": socket.gethostname(),
        }

class Git(Situation):
    key = "git"

    @staticmethod
    def figure_out(args):
        git_exe = shutil.which("git")
        if not git_exe:
            return None

        p = subprocess.run([git_exe, "rev-parse", "--is-inside-work-tree"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        if p.returncode != 0:
            return None

        def git(*args):
            p = subprocess.run([git_exe] + list(args), text=True, stdout=subprocess.PIPE)
            if p.returncode != 0:
                yield None
            for l in p.stdout.splitlines():
                yield l.rstrip()

        def git1(*args):
            return list(git(*args))[0]

        dirty = len(list(git("status", "--porcelain"))) > 0

        d = {
            "ref_id": git1("rev-parse", "HEAD"),
            "branch": git1("rev-parse", "--abbrev-ref", "HEAD"),
            "dirty": dirty,
        }

        if dirty:
            d["user_name"] = git1("config", "user.name")
            d["user_email"] = git1("config", "user.email")
            d["signing_key"] = git1("config", "user.signingkey")
        else:
            d["user_name"] = git1("--no-pager", "log", "--format=format:%an", "-n1")
            d["user_email"] = git1("--no-pager", "log", "--format=format:%ae", "-n1")
            d["author_date"] = git1("--no-pager", "log", "--format=format:%aI", "-n1")
            d["signing_key"] = git1("--no-pager", "log", "--format=format:%GP", "-n1")

        return d

class LSB(Situation):
    key = "lsb"

    @staticmethod
    def figure_out(args):
        lsb_exe = shutil.which("lsb_release")
        if not lsb_exe:
            return None

        p = subprocess.run(["lsb_relase", "--all"], executable=lsb_exe, check=True, text=True, stdout=subprocess.PIPE)
        i = {}
        for l in p.stdout.splitlines():
            (k, v) = l.split(":")
            k = k.lower().replace(" ", "-")
            i[k] = v.strip()
        return i


class Format:
    @staticmethod
    def add_arguments(parser):
        pass

    @staticmethod
    def format(args, d, stream):
        return None

class Json(Format):
    key = "json"

    @staticmethod
    def format(args, d, stream):
        stream.write(json.dumps(d))

class Env(Format):
    key = "env"

    @staticmethod
    def add_arguments(parser):
        g = parser.add_argument_group("Environment variable format")
        g.add_argument("--env-prefix")

    @staticmethod
    def format(args, d, stream):
        K = lambda k: k.upper().replace("-", "_")

        def go(k, x):
            if isinstance(x, bool):
                stream.write(f"{K(k)}={'1' if x else ''}\n")
            elif isinstance(x, str):
                stream.write(f'{K(k)}="{x}"\n')
            elif isinstance(x, int):
                stream.write(f"{K(k)}={x}\n")
            elif x is None:
                stream.write(f"{K(k)}=\n")
            elif isinstance(x, dict):
                for k0, v in x.items():
                    go(f"{k}_{k0}", v)
            else:
                raise TypeError(f"unsupported type; {k}: {type(x)}")

        for k, v in d.items():
            go((args.env_prefix or "") + k, v)

class Html(Format):
    key = "html"

    @staticmethod
    def add_arguments(parser):
        g = parser.add_argument_group("HTML format")
        g.add_argument("--html-standalone", action="store_true")
        g.add_argument("--html-title")
        g.add_argument("--html-initial-header-level", metavar="INT", type=int, default=1)
        g.add_argument("--html-lowest-header-level", metavar="INT", type=int, default=1)

    @staticmethod
    def format(args, d, stream):
        if args.html_standalone:
            stream.write("<html><head>")
            if args.html_title:
                stream.write(f"<title>{html.escape(x)}</title>")
            stream.write("</head><body>")

        hlevels = args.html_lowest_header_level
        def go(level, k, x):
            if level <= hlevels:
                stream.write(f"<h{level}>{k}</h{level}>")
            else:
                stream.write(f"<tr><td>{k}:</td><td>")

            if isinstance(x, bool):
                stream.write("true" if x else "false")
            elif isinstance(x, str):
                stream.write(html.escape(x))
            elif isinstance(x, int):
                stream.write(str(x))
            elif x is None:
                pass
            elif isinstance(x, dict):
                stream.write("<table>")
                for k0, v in x.items():
                    go(level+1, k0, v)
                stream.write("</table>")
            else:
                raise TypeError(f"unsupported type: {type(x)}")

            if level > hlevels:
                stream.write("</td></tr>")

        for k, v in d.items():
            go(args.html_initial_header_level, k, v)

        if args.html_standalone:
            stream.write("</body></html>")

situations = Situation.__subclasses__()
formats = Format.__subclasses__()

def parse_args():
    parser = argparse.ArgumentParser(
            description="Where, who, and what am I?",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    def add_output(p):
        p.add_argument("-o", "--output")

    def add_formats(p):
        fmts = p.add_argument_group("Formats").add_mutually_exclusive_group(required=True)
        for f in formats:
            fmts.add_argument(f"--{f.key}", action="store_true")
            f.add_arguments(p)

    subparsers = parser.add_subparsers(dest="cmd", required=True)

    current_cmd = subparsers.add_parser("current")
    current_cmd.add_argument("-C", "--directory", metavar="DIR", default=os.getcwd(), help="change directory to DIR")
    add_output(current_cmd)
    add_formats(current_cmd)
    ss = current_cmd.add_argument_group("Situations")
    for s in situations:
        ss.add_argument(f"--{s.key}", metavar="BOOL", action=argparse.BooleanOptionalAction, default=True)
        s.add_arguments(current_cmd)

    format_cmd = subparsers.add_parser("format")
    add_output(format_cmd)
    add_formats(format_cmd)
    format_cmd.add_argument("input", metavar="INPUT")

    merge_cmd = subparsers.add_parser("merge")
    add_output(merge_cmd)
    add_formats(merge_cmd)
    merge_cmd.add_argument("parts", metavar="KEY=FILE", nargs="+")

    return parser.parse_args()

def main():
    args = parse_args()

    situation = {}
    if args.cmd == "current":
        if args.directory:
            os.chdir(args.directory)

        for s in situations:
            if not vars(args)[s.key]:
                continue
            i = s.figure_out(args)
            if i is not None:
                situation[s.key] = i
    elif args.cmd == "format":
        with open(args.input, "r") as f:
            situation = json.load(f)
    elif args.cmd == "merge":
        for part in args.parts:
            k, fn = part.split("=", 1)
            with open(fn, "r") as f:
                situation[k] = json.load(f)

    stream = open(args.output, "w") if args.output else sys.stdout
    for fmt in formats:
        if vars(args)[fmt.key]:
            fmt.format(args, situation, stream=stream)
            stream.close()
            return
    raise RuntimeError("unknown format")

if __name__ == "__main__":
    main()
