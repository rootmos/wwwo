#!/bin/bash

set -o nounset -o pipefail -o errexit

THIS_SCRIPT=$(readlink -f "$0")

BUILDML_TARGET=
SUFFIX=
ACTION=compile
BUILDML_PROJECT_ROOT=${BUILDML_PROJECT_ROOT-}
while getopts "t:C:sdcemMI-" OPT; do
    case $OPT in
        t) BUILDML_TARGET=$OPTARG; SUFFIX=.$BUILDML_TARGET ;;
        C) cd $OPTARG ;;
        s) ACTION=switch ;;
        d) ACTION=deps ;;
        c) ACTION=compile; break ;;
        e) ACTION=execute; break ;;
        m) ACTION=make; break ;;
        M) ACTION=makefile ;;
        I) ACTION=ignorefile ;;
        -) break ;;
        ?) exit 2 ;;
    esac
done
shift $((OPTIND-1))

if [ "$ACTION" = "ignorefile" ]; then
    cat <<EOF
.opam
.switch*
.deps*
EOF
    exit 0
fi

if [ -z "$BUILDML_PROJECT_ROOT" ]; then
    BUILDML_PROJECT_ROOT=$(pwd)
fi

if [ -z "$BUILDML_TARGET" ]; then
    BUILDML_TARGET=$(basename "$BUILDML_PROJECT_ROOT")
fi

if [ "$ACTION" = "make" ] || [ "$ACTION" = "makefile" ]; then
    TMP=$(mktemp -d "/tmp/buildml-XXXXX")
    trap 'rm -rf $TMP' EXIT

    cat <<EOF >"$TMP/buildml.mk"
BUILDML = $THIS_SCRIPT
BUILDML_OCAMLC = \$(BUILDML) -c \$(BUILDML_OCAMLC_OPTS)
BUILDML_OCAMLC_OPTS ?= -output-complete-exe
BUILDML_EXEC = \$(BUILDML) -e
export BUILDML_TARGET = $BUILDML_TARGET
export BUILDML_PROJECT_ROOT = $(readlink -f "$BUILDML_PROJECT_ROOT")

define atd
\$(1)_t.mli \$(1)_t.ml \$(1)_j.mli \$(1)_j.ml
endef

%_t.mli %_t.ml: %.atd
	\$(BUILDML_EXEC) atdgen -t $<

%_j.mli %_j.ml: %.atd
	\$(BUILDML_EXEC) atdgen -j $<

ifeq (\$(.DEFAULT_GOAL),)
\$(error no default goal is set)
endif

.PHONY: clean
clean:
	rm -rf *.exe *.cmi *.cmo *_{j,t}.{ml,mli}
EOF

    if [ "$ACTION" = "makefile" ]; then
        cat "$TMP/buildml.mk"
        exit 0
    fi

    ${MAKE-make} -I"$TMP" "$@"
    exit 0
elif [ "$ACTION" != "switch" ] && [ "$ACTION" != "deps" ] && [ "$ACTION" != "compile" ] && [ "$ACTION" != "execute" ]; then
    echo 1>&2 "unsupported action: $ACTION"
    exit 1
fi

export OPAMROOT="$BUILDML_PROJECT_ROOT/.opam"

if [ ! -d "$OPAMROOT" ]; then
    echo 1>&2 "initializing OPAM: $OPAMROOT"
    ARGS=("--bare" "--no-setup")
    if [ -n "${OPAMNOSANDBOXING-}" ]; then
        ARGS+=("--disable-sandboxing")
    fi
    opam init "${ARGS[@]}"
fi

SWITCH_SPEC="$BUILDML_PROJECT_ROOT/switch.$BUILDML_TARGET"
if [ ! -f "$SWITCH_SPEC" ]; then
    SWITCH_SPEC="$BUILDML_PROJECT_ROOT/switch"
fi
if ! [ "$BUILDML_PROJECT_ROOT/.switch$SUFFIX" -nt "$SWITCH_SPEC" ]; then
    mapfile -t SPEC < "$SWITCH_SPEC"
    export OPAMSWITCH=${SPEC[0]}
    if ! opam env --set-switch &>/dev/null; then
        echo 1>&2 "creating switch: ${SPEC[@]}"
        opam switch create --no-switch "${SPEC[@]}"
    fi
    echo "$OPAMSWITCH" > "$BUILDML_PROJECT_ROOT/.switch$SUFFIX"
else
    export OPAMSWITCH=$(<"$BUILDML_PROJECT_ROOT/.switch$SUFFIX")
fi

eval "$(opam env --set-switch)"

if [ "$ACTION" = "switch" ]; then
    opam switch show
    exit 0
elif [ "$ACTION" = "execute" ]; then
    exec "$@"
fi

DEPS_SPEC="$BUILDML_PROJECT_ROOT/deps.$BUILDML_TARGET"
if [ ! -f "$DEPS_SPEC" ]; then
    DEPS_SPEC="$BUILDML_PROJECT_ROOT/deps"
fi

mapfile -t PKGs < "$DEPS_SPEC"

OCAMLFIND_PKG=${OCAMLFIND_PKG-ocamlfind>=1.9.6}

if ! [ "$BUILDML_PROJECT_ROOT/.deps$SUFFIX" -nt "$DEPS_SPEC" ]; then
    echo 1>&2 "installing dependencies:"
    for p in "$OCAMLFIND_PKG" "${PKGs[@]}"; do
        echo 1>&2 "  $p"
    done
    opam install --yes "$OCAMLFIND_PKG" "${PKGs[@]}"
    touch "$BUILDML_PROJECT_ROOT/.deps$SUFFIX"
fi

if [ "$ACTION" = "deps" ]; then
    exit 0
fi

ARGS=("-linkpkg")

for p in "${PKGs[@]}"; do
    ARGS+=("-package" "$(sed 's/\([a-zA-Z0-9_-]\+\).*/\1/' <<< "$p")")
done

exec ocamlfind ocamlc "${ARGS[@]}" "$@"
